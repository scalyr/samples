// WatchGuard reference https://www.watchguard.com/help/docs/fireware/12/en-US/log_catalog/12_10_Log-Catalog.pdf
{
  attributes: {
    "dataSource.category": "security",
    "dataSource.name": "WatchGuard Firewall",
    "dataSource.vendor": "WatchGuard",
    "category_name": "Network Activity",
    "category_uid": "4",
    "class_name": "Network Activity",
    "class_uid": "4001",
    "activity_id": "0",
    "type_uid": "400100",
    "severity_id": "1",
    "severity": "Informational",
    "metadata.product.name": "WatchGuard Firewall",
    "metadata.product.vendor_name": "WatchGuard",
    "metadata.version": "1.1.0",
    "app_name": "Fireware",
    "event.type": "Firewall"
  },
  patterns: {
    tsPattern: "\\w{3}\\s+\\d{1,2}\\s+\\d{2}:\\d{2}:\\d{2}",
    digitPattern: "\\d+",
    msgPattern: ".*$"
  },
  formats: [
    {
      format: ".*$_=identifier$=$_=quoteOrSpace$"
      repeat: true,
      rewrites: [
        {
          input: "app_cat_id",
          output: "umapped.app_cat_id",
          match: ".*",
          replace: "$0"
        }, {
          input: "app_id",
          output: "umapped.app_id",
          match: ".*",
          replace: "$0"
        }, {
          input: "arg",
          output: "http_request.args",
          match: ".*",
          replace: "$0"
        }, {
          input: "cert_issuer",
          output: "tls.certificate.issuer",
          match: ".*",
          replace: "$0"
        }, {
          input: "cert_subject",
          output: "tls.certificate.subject",
          match: ".*",
          replace: "$0"
        }, {
          input: "cn",
          output: "unmapped.common_name",
          match: ".*",
          replace: "$0"
        }, {
          input: "dstname",
          output: "dst_endpoint.ip",
          match: ".*",
          replace: "$0"
        }, {
          input: "geo_src",
          output: "src_endpoint.location.country",
          match: ".*",
          replace: "$0"
        }, {
          input: "geo_dst",
          output: "dst_endpoint.location.country",
          match: ".*",
          replace: "$0"
        }, {
          input: "msg",
          output: "unmapped.event_type",
          match: ".*",
          replace: "$0"
        }, {
          input: "msg",
          output: "class_name",
          match: "HTTPS Request",
          replace: "HTTP Activity"
        }, {
          input: "msg",
          output: "class_uid",
          match: "HTTPS Request",
          replace: "4002"
        }, {
          input: "msg",
          output: "type_uid",
          match: "HTTPS Request",
          replace: "400200"
        }, {
          input: "op",
          output: "activity_id",
          match: "CONNECT",
          replace: "1"
        }, {
          input: "op",
          output: "http_request.http_method",
          match: "CONNECT",
          replace: "Connect"
        }, {
          input: "op",
          output: "activity_id",
          match: "DELETE",
          replace: "2"
        }, {
          input: "op",
          output: "http_request.http_method",
          match: "DELETE",
          replace: "Delete"
        }, {
          input: "op",
          output: "activity_id",
          match: "GET",
          replace: "3"
        }, {
          input: "op",
          output: "http_request.http_method",
          match: "GET",
          replace: "Get"
        }, {
          input: "op",
          output: "activity_id",
          match: "HEAD",
          replace: "4"
        }, {
          input: "op",
          output: "http_request.http_method",
          match: "HEAD",
          replace: "Head"
        }, {
          input: "op",
          output: "activity_id",
          match: "OPTIONS",
          replace: "5"
        }, {
          input: "op",
          output: "http_request.http_method",
          match: "OPTIONS",
          replace: "Options"
        }, {
          input: "op",
          output: "activity_id",
          match: "POST",
          replace: "6"
        }, {
          input: "op",
          output: "http_request.http_method",
          match: "POST",
          replace: "Post"
        }, {
          input: "op",
          output: "activity_id",
          match: "PUT",
          replace: "7"
        }, {
          input: "op",
          output: "http_request.http_method",
          match: "PUT",
          replace: "Put"
        }, {
          input: "op",
          output: "activity_id",
          match: "TRACE",
          replace: "8"
        }, {
          input: "op",
          output: "http_request.http_method",
          match: "TRACE",
          replace: "Trace"
        }, {
          input: "elapsed_time",
          output: "http_request.duration",
          match: "sec\\(s\\)",
          replace: ""
        }, {
          input: "proxy_act",
          output: "unmapped.rule_matched",
          match: ".*",
          replace: "$0"
        }, {
          input: "rc",
          output: "status",
          match: ".*",
          replace: "$0"
        }, {
          input: "rcvd_bytes",
          output: "traffic.bytes_in",
          match: ".*",
          replace: "$0"
        }, {
          input: "sent_bytes",
          output: "traffic.bytes_out",
          match: ".*",
          replace: "$0"
        }, {
          input: "sig_vers",
          output: "umapped.signature_version",
          match: ".*",
          replace: "$0"
        }, {
          input: "sni",
          output: "tls.sni",
          match: ".*",
          replace: "$0"
        }, {
          input: "src_ip_nat",
          output: "unmapped.nat_initiator_ip",
          match: ".*",
          replace: "$0"
        }, {
          input: "tls_profile",
          output: "unmapped.tls_profile",
          match: ".*",
          replace: "$0"
        }, {
          input: "tls_version",
          output: "tls.version",
          match: ".*",
          replace: "$0"
        }
      ]
    }, {
      id: "firewall-traffic-with-packet-length",
      format: "<\\d+>$timestamp=tsPattern$ $device.hostname$ $device_hw_info.serial_number$ $device_hw_info.model_name$.*firewall: msg_id=\"$metadata.event_code$\" $unmapped.action_value$ $unmapped.inbound_if$ $unmapped.outbound_if$ $unmapped.packet_length=digits$ $connection_info.protocol_name$ $src_endpoint.ip$ $dst_endpoint.ip$ $unmapped.tcp_info$ $unmapped.udp_info$.*\\($unmapped.policy_id$\\)",
      halt: true,
      attributes: {
        "metadata.log_name": "traffic"
      },
      rewrites: [
        {
          input: "timestamp",
          output: "time",
          match: ".*",
          replace: "$0"
        }
      ]
    }, {
      id: "firewall-traffic-without-packet-length",
      format: "<\\d+>$timestamp=tsPattern$ $device.hostname$ $device_hw_info.serial_number$ $device_hw_info.model_name$.*firewall: msg_id=\"$metadata.event_code$\" $unmapped.action_value$ $unmapped.inbound_if$ $unmapped.outbound_if$ $connection_info.protocol_name$ $src_endpoint.ip$ $dst_endpoint.ip$ $unmapped.tcp_info$ $unmapped.udp_info$.*\\($unmapped.policy_id$\\)",
      halt: true,
      attributes: {
        "metadata.log_name": "traffic"
      }
      rewrites: [
        {
          input: "timestamp",
          output: "time",
          match: ".*",
          replace: "$0"
        }
      ]
    }, {
      id: "proxy-http-traffic",
      // Format may be one or the other.
      //format: "<\\d+>$timestamp=tsPattern$ $device.hostname$ $device_hw_info.serial_number$ $device_hw_info.model_name$.*http.-proxy\\[\\d+\\]: msg_id=\"$metadata.event_code$\" $unmapped.action_value$ $unmapped.inbound_if$ $unmapped.outbound_if$ $connection_info.protocol_name$ $src_endpoint.ip$ $dst_endpoint.ip$ $src_endpoint.port$ $dest_endpoint.port$ $unmapped.udp_info$.*\\($unmapped.policy_id$\\)",
      format: "<\\d+>$timestamp=tsPattern$ $device.hostname$ $device_hw_info.serial_number$ $device_hw_info.model_name$.*http-proxy\\[\\d+\\]: msg_id=\"$metadata.event_code$\" $unmapped.action_value$ $unmapped.inbound_if$ $unmapped.outbound_if$ $connection_info.protocol_name$ $src_endpoint.ip$ $dst_endpoint.ip$ $src_endpoint.port$ $dest_endpoint.port$",
      halt: true,
      attributes: {
        "metadata.log_name": "traffic"
      }
      rewrites: [
        {
          input: "timestamp",
          output: "time",
          match: ".*",
          replace: "$0"
        }
      ]
    },
    
    {
      id: "wrapper-nginx",
      format: "<\\d+>$timestamp=tsPattern$ $device.hostname$ $device_hw_info.serial_number$ $device_hw_info.model_name$.*wrapper\\[\\d+\\]: nginx: \\d{1,4}\\/\\d{1,2}\\/\\d{1,2} \\d{1,2}:\\d{1,2}:\\d{1,2} \\[$unmapped.severity$\\] $unmapped.message=msgPattern$",
      halt: true,
      attributes: {
        "metadata.log_name": "wrapper"
      }
      rewrites: [
        {
          input: "timestamp",
          output: "time",
          match: ".*",
          replace: "$0"
        }
      ]
    }, {
      id: "message",
      format: "<\\d+>$timestamp=tsPattern$ $device.hostname$ $device_hw_info.serial_number$ $device_hw_info.model_name$.* (wrapper|configd|certd|systemd|iked)\\[\\d+\\]: $unmapped.message=msgPattern$",
      halt: true,
      attributes: {
        "metadata.log_name": "message"
      }
      rewrites: [
        {
          input: "timestamp",
          output: "time",
          match: ".*",
          replace: "$0"
        }
      ]
    }, {
      id: "dhcpd",
      format: "<\\d+>$timestamp=tsPattern$ $device.hostname$ $device_hw_info.serial_number$ $device_hw_info.model_name$.*dhcpd\\[\\d+\\]: msg_id=\"$metadata.event_code$\" $unmapped.action_value$ (for|on) $src_endpoint.ip$ from|to $dst_endpoint.ip$ .*via $src_endpoint.vlan_uid$",
      halt: true,
      attributes: {
        "metadata.log_name": "dhcpd"
      }
      rewrites: [
        {
          input: "timestamp",
          output: "time",
          match: ".*",
          replace: "$0"
        }
      ]
    }, {
      id: "vpn-login-logout",
      format: "<\\d+>$timestamp=tsPattern$ $device.hostname$ $device_hw_info.serial_number$ $device_hw_info.model_name$.*sessiond\\[\\d+\\]: msg_id=\"$metadata.event_code$\" SSL VPN user $user$ from $src_endpoint.ip$ logged $vpn_status$ assigned virtual IP is $tunnel_interface.ip$",
      halt: true,
      attributes: {
        "metadata.log_name": "vpn"
      }
      rewrites: [
        {
          input: "vpn_status",
          output: "activity_id",
          match: "in",
          replace: "1"
        }, {
          input: "vpn_status",
          output: "activity_id",
          match: "out",
          replace: "2"
        }, {
          input: "timestamp",
          output: "time",
          match: ".*",
          replace: "$0"
        }
      ]
    }, {
      id: "vpn-auth",
      format: "<\\d+>$timestamp=tsPattern$ $device.hostname$ $device_hw_info.serial_number$ $device_hw_info.model_name$.*admd\\[\\d+\\]: msg_id=\"$metadata.event_code$\" Authentication of SSLVPN user \\[$user$\\] from $src_endpoint.ip$ was $status$",
      halt: true,
      attributes: {
        "metadata.log_name": "vpn",
        "activity_id": 0
      }
      rewrites: [
        {
          input: "timestamp",
          output: "time",
          match: ".*",
          replace: "$0"
        }
      ]
    }
  ]
}
