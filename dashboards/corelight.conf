{
 tabs: [{"tabName":"Conn","graphs":[{
      graphStyle: "pie",
      maxPieSlices: 10,
      query: "parser='corelight_conn' id.resp_p  = * \n| group c =  count() by id.resp_p \n| sort -c ",
      title: "Common Server Ports ",
      layout: {
  h: 12,
  w: 23,
  x: 0,
  y: 0
}
    },
{
  query: "(logfile contains 'conn'  service= *)\n\n| group count() by id.resp_p = id.resp_p + \"\", service\n| lookup \"Description\" from \"ports.csv\" by Port=id.resp_p\n| filter Description = null",
  title: "Odd Ports",
  layout: {
  h: 12,
  i: "1",
  minH: 3,
  minW: 6,
  w: 18,
  x: 23,
  y: 0
},
  graphStyle: "",
  showBarsColumn: "false"
},
{
  query: "(logfile contains 'conn'  NOT(service= *))\n|group count() by id.resp_h, id.resp_p = id.resp_p + \"\" , service, conn_state \n| filter conn_state != 'OTH' \n\n",
  title: "Port Application Mismatch",
  layout: {
  h: 12,
  w: 19,
  x: 41,
  y: 0
}
},
{
  query: "uid = * \n|sort timestamp\n|group count() by uid, id.orig_h, id.orig_p, id.resp_h, id.resp_p, duration, conn_state, proto, service, timestamp \n|limit 100\n",
  title: "Information",
  layout: {
    h: 12,
    w: 59,
    x: 0,
    y: 12
  }
},
{
  query: "(logfile contains 'conn') service = *\n|group Total = count() by id.resp_h\n| sort  -Total\n| limit 15",
  title: "Top Responders (destinations) by # of connections",
  graphStyle: "donut",
  maxPieSlices: 10,
  layout: {
    h: 14,
    w: 20,
    x: 20,
    y: 24
  }
},
{
  query: "(logfile contains 'conn') service = *\n|group Total = count() by id.orig_h\n| sort  -Total\n| limit 15",
  title: "Top Originators (sources) by # of connections",
  graphStyle: "pie",
  maxPieSlices: 15,
  layout: {
    h: 14,
    w: 20,
    x: 40,
    y: 24
  }
},
{
  query: "(logfile contains 'conn') service = *\n|group Total = count() by id.resp_p \n| sort  -Total\n| limit 15",
  title: "Top Responder Ports",
  layout: {
  h: 14,
  w: 20,
  x: 0,
  y: 24
}
},
{
  query: "(logfile contains 'conn') service = *\n|group Total = count() by service\n| sort  -Total\n| limit 15",
  title: "Top Services",
  graphStyle: "",
  showBarsColumn: "true",
  layout: {
  h: 14,
  w: 20,
  x: 0,
  y: 52
}
},
],
 filters: [
   {
     defaultValue: "*",
     facet: "id.orig_h",
     name: "id.orig_h"
   },
   {
     facet: "id.orig_p",
     name: "id.orig_p",
     defaultValue: "*"
   },
   {
     facet: "id.resp_h",
     name: "id.resp_h",
     defaultValue: "*"
   },
   {
     facet: "id.resp_p",
     name: "id.resp_p",
     defaultValue: "*"
   }
 ]
},
{"tabName":"DNS",
graphs : [
  {
    query: "parser='corelight_dns'\n|group count() by id.resp_h \n| lookup enabled from \"dns-whitelist.csv\" by DNS-IP=id.resp_h\n|filter enabled != \"true\"",
    title: "Rogue DNS Servers",
    layout: {
  h: 14,
  w: 20,
  x: 0,
  y: 0
}
  },
  {
    query: "|inner join \nhttp = (not(resp_fuids = * ) not(id.resp_h matches '192\\\\.168\\\\.1[1-6]\\\\.d+')  logfile contains \"http\"\n| group count() by uid, id.resp_h, id.resp_p, id.orig_h, id.orig_p, mime_type ),\nconn = (not(resp_fuids = * ) not(id.resp_h matches '192\\\\.168\\\\.1[1-6]\\\\.d+')    logfile contains \"conn\"\n\n| group count() by uid, id.resp_h, id.resp_p, id.orig_h, id.orig_p, mime_type, local_resp, mime_type)\n\non\n\n\nuid\n//| filter local_resp = true\n//| filter http.mime_type in (\"application/x-java-applet\",\"application/x-java-jnlp-file\",\"application/chrome-ext-upd\",\"text/x-shellscript\",\"application/x-gzip\",\"application/x-bzip2\",\"application/zip\", \"executable\", \"dll\")",
    title: "Drive By",
    layout: {
  h: 14,
  w: 20,
  x: 20,
  y: 0
}
  },
  {
    query: "parser='corelight_dns' | columns query, record_type = qtype_name ? qtype_name : 'unknown', id_orig_h = id.orig_h ? id.orig_h : 'unknown' , reply_code = rcode ? rcode : 'unknown', timestamp | group count = count(), _time = min(timestamp) by query, record_type, id_orig_h, reply_code\n|group count = count() by record_type ",
    title: "Top Query Types",
    graphStyle: "pie",
    maxPieSlices: 10,
    layout: {
      h: 14,
      w: 20,
      x: 40,
      y: 0
    }
  },
  {
    graphStyle: "pie",
    maxPieSlices: 10,
    query: "parser='corelight_dns' | columns query, record_type = qtype_name ? qtype_name : 'unknown', id_orig_h = id.orig_h ? id.orig_h : 'unknown' , reply_code = rcode ? rcode : 'unknown', timestamp | group count = count(), _time = min(timestamp) by query, record_type, id_orig_h, reply_code\n|group count = count() by record_type ",
    title: "Top Query Types",
    layout: {
      h: 14,
      w: 20,
      x: 0,
      y: 14
    }
  },
  {
    query: "parser='corelight_dns' | columns query, record_type = qtype_name ? qtype_name : 'unknown', id_orig_h = id.orig_h ? id.orig_h : 'unknown' , reply_code = rcode ? rcode : 'unknown', timestamp | group count = count(), _time = min(timestamp) by query, record_type, id_orig_h, reply_code\n\n|group count = count() by query \n| sort -count\n| limit 10",
    title: "Top Successful Reverse Queries by Count",
    layout: {
      h: 14,
      w: 20,
      x: 20,
      y: 29
    }
  },
  {
    graphStyle: "",
    maxPieSlices: 10,
    query: "parser='corelight_dns' | columns query, record_type = qtype_name ? qtype_name : 'unknown', id_orig_h = id.orig_h ? id.orig_h : 'unknown' , reply_code = rcode ? rcode : 'unknown', timestamp | group count = count(), _time = min(timestamp) by query, record_type, id_orig_h, reply_code\n|group count = count() by query  | sort -count",
    title: "Top 10 Queries by Count",
    showBarsColumn: "false",
    layout: {
      h: 14,
      w: 20,
      x: 40,
      y: 29
    }
  },
  {
    query: "parser='corelight_dns' | columns query, record_type = qtype_name ? qtype_name : 'unknown', id_orig_h = id.orig_h ? id.orig_h : 'unknown' , reply_code = rcode_name ? rcode_name : 'unknown', timestamp | group count = count(), _time = min(timestamp) by query, record_type, id_orig_h, reply_code\n| filter  reply_code=\"NXDOMAIN\"\n|group count = count() by query ",
    title: "Top 10 Queries by Count to Non-Existent Domains",
    graphStyle: "",
    showBarsColumn: "false",
    layout: {
      h: 14,
      w: 20,
      x: 0,
      y: 28
    }
  },
  {
    query: "parser='corelight_dns' | columns query, record_type = qtype_name ? qtype_name : 'unknown', id_orig_h = id.orig_h ? id.orig_h : 'unknown' , reply_code = rcode ? rcode : 'unknown', timestamp | group count = count(), _time = min(timestamp) by query, record_type, id_orig_h, reply_code\n\n|group count = count() by id_orig_h \n| sort -count\n| limit 10",
    title: "Top Originators by Count",
    layout: {
      h: 14,
      w: 20,
      x: 20,
      y: 43
    }
  },
  {
    layout: {
  h: 14,
  w: 20,
  x: 32,
  y: 24
},
    query: "parser='corelight_dns'\n | group count = count(), id_orig_h.count = estimate_distinct(id.orig_h), id_orig_h = hacklist(id.orig_h), id_orig_p = hacklist(id.orig_p), id_resp_h = hacklist(id.resp_h), id_resp_p  = hacklist(id.resp_p) by uid\n | sort -count\n | let id.orig_h = replace(id_orig_h, \"#\", \"\\n\")\n | let id.orig_p = replace(id_orig_p, \"#\", \"\\n\")\n | let id.resp_h = replace(id_resp_h, \"#\", \"\\n\")\n | let id.resp_p = replace(id_resp_p, \"#\", \"\\n\")\n | columns  uid, id.orig_p, id.resp_h, id.resp_p, id.orig_h",
    title: "DNS"
  }
  ],
filters: [
  {
    facet: "serverHost",
    name: "Sensor"
  },
  {
    facet: "id.resp_p",
    name: "ResponderPort"
  },
  {
    facet: "qtype_name",
    name: "RecordType"
  }
]
},
{"tabName":"HTTP","graphs":[
  {
    query: "parser='corelight_http'\n| group c = count() by user_agent \n| sort c",
    title: "Rare User Agents",
    graphStyle: "",
    showBarsColumn: "false",
    layout: {
      h: 14,
      w: 20,
      x: 0,
      y: 0
    }
  },
  {
    query: "(logfile contains 'conn'  service matches 'https?')\n\n|group count() by id.resp_p, service",
    title: "Http Ports",
    graphStyle: "",
    showBarsColumn: "false",
    layout: {
      h: 14,
      w: 20,
      x: 20,
      y: 0
    }
  },
  {
    query: "logfile contains \"http\" user_agent = *   | group count = count() by http_user_agent= user_agent | sort -count | let agent_length = len(http_user_agent)\n|columns agent_length\n| sort -agent_length\n\n \n\n\n\n\n\n\n",
    title: "User Agent Length",
    layout: {
  h: 14,
  w: 20,
  x: 40,
  y: 14
}
  },
  {
    query: "\nlogfile contains \"http\" user_agent = *   | group count = count() by http_user_agent= user_agent | sort -count \n\n \n\n\n\n\n\n\n",
    title: "Distinct User Agents",
    layout: {
      h: 14,
      w: 20,
      x: 0,
      y: 14
    }
  },
  {
    graphStyle: "number",
    query: "(logfile contains 'http') user_agent = * | group estimate_distinct(user_agent) by user_agent, len =len(user_agent) | group avg = mean(len)",
    title: "Average User Agent Length",
    layout: {
  h: 8,
  w: 16,
  x: 20,
  y: 14
}
  ,
  },
  {
    graphStyle: "line",
    plots: [
      {
        color: "#00BDD6",
        facet: "mean(response_body_len)",
        filter: "(logfile contains 'http' || k8s-controller contains 'http' || k8s-cron-job contains 'http' || k8s-daemon-set contains 'http' || k8s-deployment contains 'http' || k8s-job contains 'http' || k8s-replica-set contains 'http' || k8s-replication-controller contains 'http' || k8s-stateful-set contains 'http')",
        label: "mean(response_body_len)"
      }
    ],
    title: "Response Body Length",
    layout: {
  h: 14,
  w: 20,
  x: 40,
  y: 0
}
  },
  {
    query: "\nlogfile contains \"http\" referrer = *   | group count() by referrer\n\n\n\n\n\n\n\n\n\n",
    title: "Distinct Referrers",
    layout: {
  h: 14,
  w: 20,
  x: 40,
  y: 28
}
  },
  {
    breakdownFacet: "status_code",
    graphStyle: "stacked",
    plots: [
      {
        facet: "rate",
        filter: "(logfile contains 'http' || k8s-controller contains 'http' || k8s-cron-job contains 'http' || k8s-daemon-set contains 'http' || k8s-deployment contains 'http' || k8s-job contains 'http' || k8s-replica-set contains 'http' || k8s-replication-controller contains 'http' || k8s-stateful-set contains 'http') status_code = *",
        label: "rate"
      }
    ],
    title: "Status Code Breakdown",
    lineSmoothing: "straightLines",
    layout: {
      h: 14,
      w: 20,
      x: 0,
      y: 28
    }
  },
  {
    graphStyle: "",
    query: "parser='corelight_http'\n| group c = count() by host \n| sort c",
    showBarsColumn: "false",
    title: "Rare Host Headers",
    layout: {
  h: 14,
  w: 20,
  x: 20,
  y: 22
}
  }
]},
{"tabName":"SSL","graphs":[
  {
    query: "parser='corelight_ssl'\n|parse \"o=$o$\\\\\\\\?,\" from subject\n|group count = count() by o\n|filter o = *|sort -count\n",
    title: "Common Orgs connected via SSL"
  },
  {
    layout: {
      h: 13,
      w: 60,
      x: 0,
      y: 39
    },
    query: "ssl_* contains \"\"\n| sort timestamp\n|limit 100\n|columns uid, id.orig_h, id.orig_p, id.resp_h, id.resp_p, ssl_history\n\n",
    title: "SSL"
  }
]},
{"tabName":"RDP/SSH","graphs":[]},
{"tabName":"Files","graphs":[
  {
    layout: {
      h: 14,
      w: 20,
      x: 40,
      y: 0
    },
    query: "resp_fuids=* not(resp_mime_types in ('[text/plain]','[text/html]','[image/jpeg]','[text/json]','[image/gif]','[image/png]','[application/ocsp-response]','[application/xml]','[application/javascript]','[image/x-icon]', '-')) serverHost='Kafka-http'\n| group count=count() by resp_mime_types \n| sort -count",
    title: "Weird MIME Types"
  }
]}],
 configType: "TABBED"
}
