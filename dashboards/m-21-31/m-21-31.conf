{
    parameters: [
    
    
      { "name": "Category", values: ["Identity & Credential Management", "Privileged Identity & Credential Management", "Email Filtering, Spam, and Phishing ", "Operating Systems - Windows", "Operating Systems- Windows", "Operating Systems - macOS", "Operating Systems - BSD (Linux) ", "Operating Systems - BSD (Linux)", "Network Device Infrastructure (for Devices with Multiple Interfaces)", "Network Device Infratructure ", "Network Device Infrastructure", "Network Device Infrastructure (General Logging)", "Network Device Infrastructure (Multiple Device Interfaces)", "Network Device Infrastructure ", "Network Device Infrastructure (Access, Authorization, and Accounting)", "Cloud Environments (General Logging)", "Amazon Web Services (AWS)", "Cloud Azure", "Microsoft 365", "Google Cloud Platform (GCP)", "System Configuration and Performance", "Authentication and Authorization - Administrative", "Authentication and Authorization - Authorization", "Anti-Virus/Behavioral-Based Malware Protection", "Network Device Infrastructure - Firwewalls", "Network Device Infrastructure - All Devices", "PKI Infrastructure", "Vulnerability Assessments", "Database Level", "Application Level", "Application Level - Web Application & Middleware", "Virtualization on System", "Mobile (Smartphones/Tablets)/MTD Server Logs", "Mobile (Smartphones/Tablets)/MTD Agent Logs", "Container - Supply Chain", "DLP", "Application Level - Commercial Off the Shelf (COTS)", "Application Level - Non-COTS", "Container - Image", "Contaimer - image", "Container - Management/Orchestration", "Container - OS", "Mainframes", "Container - Cluster/Pod Events"], defaultValue: "Network"} 
    { "name": "Criticality",   defaultValue: "('0', '1', '2', '3')"} 

  ], 
  graphs: [
    {
      title: "Summary",
      query: "| left join \nreq = (timestamp = *\n| limit 1000\n| group c = running_count() by timestamp\n| let id = format(\"%d\", c)\n| lookup Log, Category, Criticality from m2131.csv by id=id \n| filter  Category  contains (\"#Category#\") Criticality contains #Criticality#\n),\n\nall = (\ntag='alertState' param_requirement = * \n| group triggered = count(status='TRIGGERED'), count = count() by param_description, id = param_requirement, status = 1, param_query-m21\t\n\n)\n\non id\n\n| columns Log, param_query-m21,  log_status = abs(status) > 0 ? 10 : 0, Category, id, triggered, count\n| let status = param_query-m21 = null ? \"Needs Configuration\" : triggered > 0 ? \"Compliant\" : triggered = 0 AND count > 0  ? \"Non Compliant\" : \"Non Compliant\"\n| columns Log, status, id\n",
      layout: {
  h: 14,
  w: 60,
  x: 0,
  y: 29
},
      graphStyle: "",
      showBarsColumn: "false"
    },
    {
      graphStyle: "",
      title: "CISA Requirements (Criticality 0)",
      query: "timestamp = *\n| limit 1000\n| group c = running_count() by timestamp\n| let id = format(\"%d\", c)\n| lookup Log, Category, Criticality from m2131.csv by id=id\n| columns Criticality, Category, Log, id\n| filter  Category  contains \"#Category#\"\n| columns Criticality, Category, Log\n",
      showBarsColumn: "false",
      layout: {
  h: 14,
  w: 30,
  x: 30,
  y: 15
}
    ,
    },
    {
      graphStyle: "honeycomb",
      honeyCombColor: {
        hover: "#B9E885",
        label: "Green",
        value: "#6DB222"
      },
      honeyCombGroupBy: "",
      honeyCombLinkTo: "/events?startTime=1+hour&view=standard&filter=[query]",
      honeyCombThresholds: ["0", "1", "9", "10"],
      layout: {
  h: 14,
  w: 30,
  x: 0,
  y: 15
},
      query: "| left join \nreq = (timestamp = *\n| limit 1000\n| group c = running_count() by timestamp\n| let id = format(\"%d\", c)\n| lookup Log, Category, Criticality from m2131.csv by id=id \n| filter  Category  contains (\"#Category#\") and Criticality contains #Criticality#\n),\n\nall = (\n tag='alertState' param_requirement = * \n| group count = count(), triggered = count(status='TRIGGERED') by param_description, id = param_requirement, status = 1, param_query-m21\t\n\n)\n\non id\n\n| columns Log, param_query-m21 ,   log_status = abs(status) > 0 ? 10 : 1, triggered, count\n| let status = param_query-m21 = null ? 1 : triggered > 0 ? 10 : triggered = 0 AND count > 0  ? 2: 2\n| let query = param_query-m21 = null ? \"needs config\" : triggered > 0 ? param_query-m21 : triggered = 0 AND count > 0  ? param_query-m21: param_query-m21\n| columns Log, query,status",
      title: "At a Glance (Watchlist)"
    },
    {
      graphStyle: "markdown",
      markdown: "# M-21-31 Compliance Detections Dashboards\n\nSentinelOne Engineering and Government teams have reviewed each of the requirements of M-21-31 and compiled a list of those requirements. Where possible, we've mapped these requirements to a search to aid in compliance verification.\n\n## How to Use\n\nThe dashboard includes three statuses to indicate compliance levels:\n\n1. **Status 1**:  \n   Requires configuration of the bureau.  \n   - This status is for items that are bureau-specific and need additional setup.  \n\n2. **Status 2**:  \n   Non-compliant.  \n   - This status means the search has returned no results within the configured time frame.  \n\n3. **Status 10**:  \n   Compliant.  \n   - This status means the search has successfully found the logs in question.",
      title: "ReadMe",
      layout: {
  h: 15,
  w: 60,
  x: 0,
  y: 0
}
    }
  ],
  filters: [
  ],
  description: ""
}
